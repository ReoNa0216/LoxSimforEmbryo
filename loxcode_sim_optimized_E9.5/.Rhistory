setwd("E:/AI_for_material_and_cell/stochastic agent-based model/loxcode_sim_optimized")
library(ggplot2)
library(pheatmap)
library(gridExtra)
library(RColorBrewer)
# File paths
embryo_files <- c(
"results_embryo1_tissue_barcode_matrix.csv",
"results_embryo2_tissue_barcode_matrix.csv",
"results_embryo3_tissue_barcode_matrix.csv"
)
concatenated_file <- "results_concatenated_tissue_barcode_matrix.csv"
# Tissue grouping definitions (no changes needed)
tissue_groups_1 <- list(
"Brain" = c("L brain I", "R brain I", "L brain III", "R brain III"),
"Gonads" = c("L gonad", "R gonad"),
"Kidneys" = c("L kidney", "R kidney"),
"Upper Limbs" = c("L hand", "L arm", "R hand", "R arm"),
"Lower Limbs" = c("L foot", "L leg", "R foot", "R leg"),
"Blood" = c("blood")
)
tissue_groups_2 <- list(
"Ectoderm" = c("L brain I", "R brain I", "L brain III", "R brain III"),
"Mesoderm" = c("L gonad", "R gonad", "L kidney", "R kidney",
"L hand", "L arm", "R hand", "R arm",
"L foot", "L leg", "R foot", "R leg"),
"Blood" = c("blood")
)
# Color schemes
# Use more subtle, publication-friendly colors
group_colors_1 <- setNames(brewer.pal(length(tissue_groups_1), "Set2"), names(tissue_groups_1))
group_colors_2 <- setNames(brewer.pal(length(tissue_groups_2), "Dark2"), names(tissue_groups_2))
heatmap_color <- colorRampPalette(rev(c('#08306B','#08519C','#2171B5','#4292C6','#6BAED6','#9ECAE1',
'#C6DBEF','#DEEBF7','#F7FBFF')))(100)
# Function to read, filter, and normalize matrix data
process_matrix <- function(file_path) {
if (!file.exists(file_path)) return(NULL)
data <- read.csv(file_path, row.names = 1, check.names = FALSE)
# Filter out tissues that have no barcodes (all-zero rows)
data <- data[rowSums(data) > 0, ]
# Filter out barcodes that are not present in any tissue
data <- data[, colSums(data) > 0]
# Normalize by barcode (column)
data_norm <- apply(data, 2, function(x) if(sum(x) > 0) x / sum(x) else x)
return(data_norm)
}
# Function to create tissue annotations for rows
create_row_annotation <- function(tissues, groups, group_colors) {
annotation_df <- data.frame(Group = character(length(tissues)), row.names = tissues)
for (group_name in names(groups)) {
matching_tissues <- tissues[tissues %in% groups[[group_name]]]
if (length(matching_tissues) > 0) {
annotation_df[matching_tissues, "Group"] <- group_name
}
}
# Ensure all tissues have a group to avoid errors
annotation_df$Group[annotation_df$Group == ""] <- names(groups)[1]
return(list(
df = annotation_df,
colors = list(Group = group_colors)
))
}
# Function to create aggregated matrix
create_aggregated_matrix <- function(data_norm, groups) {
aggregated_data <- matrix(0, nrow = length(groups), ncol = ncol(data_norm))
rownames(aggregated_data) <- names(groups)
colnames(aggregated_data) <- colnames(data_norm)
for (group_name in names(groups)) {
tissues_in_group <- groups[[group_name]]
tissues_in_data <- intersect(tissues_in_group, rownames(data_norm))
if (length(tissues_in_data) > 0) {
aggregated_data[group_name, ] <- if (length(tissues_in_data) == 1) data_norm[tissues_in_data, ] else colSums(data_norm[tissues_in_data, ])
}
}
return(aggregated_data)
}
# Process all files
all_data <- lapply(c(embryo_files, concatenated_file), process_matrix)
names(all_data) <- c(paste("Embryo", 1:3), "Concatenated")
# Create lists to store the generated plot objects
standard_plots <- list()
aggregated_plots <- list()
# Generate standard heatmaps and store them
for (name in names(all_data)) {
if (is.null(all_data[[name]])) next
# Tissue Groups
annotation_1 <- create_row_annotation(rownames(all_data[[name]]), tissue_groups_1, group_colors_1)
p1 <- pheatmap(all_data[[name]], main = paste(name, "- Tissue Groups"),
color = heatmap_color, border_color = NA,
cluster_rows = FALSE, cluster_cols = TRUE, kmeans_k = 4,
annotation_row = annotation_1$df, annotation_colors = annotation_1$colors,
show_colnames = FALSE, legend = TRUE, silent = TRUE)
# Germ Layer Groups
annotation_2 <- create_row_annotation(rownames(all_data[[name]]), tissue_groups_2, group_colors_2)
p2 <- pheatmap(all_data[[name]], main = paste(name, "- Germ Layer Groups"),
color = heatmap_color, border_color = NA,
cluster_rows = FALSE, cluster_cols = TRUE, kmeans_k = 4,
annotation_row = annotation_2$df, annotation_colors = annotation_2$colors,
show_colnames = FALSE, legend = TRUE, silent = TRUE)
# Arrange the two plots side-by-side and store the combined plot
standard_plots[[name]] <- arrangeGrob(p1$gtable, p2$gtable, ncol = 2, top = textGrob(name, gp = gpar(fontsize = 16)))
}
library(grid)
# Generate standard heatmaps and store them
for (name in names(all_data)) {
if (is.null(all_data[[name]])) next
# Tissue Groups
annotation_1 <- create_row_annotation(rownames(all_data[[name]]), tissue_groups_1, group_colors_1)
p1 <- pheatmap(all_data[[name]], main = paste(name, "- Tissue Groups"),
color = heatmap_color, border_color = NA,
cluster_rows = FALSE, cluster_cols = TRUE, kmeans_k = 4,
annotation_row = annotation_1$df, annotation_colors = annotation_1$colors,
show_colnames = FALSE, legend = TRUE, silent = TRUE)
# Germ Layer Groups
annotation_2 <- create_row_annotation(rownames(all_data[[name]]), tissue_groups_2, group_colors_2)
p2 <- pheatmap(all_data[[name]], main = paste(name, "- Germ Layer Groups"),
color = heatmap_color, border_color = NA,
cluster_rows = FALSE, cluster_cols = TRUE, kmeans_k = 4,
annotation_row = annotation_2$df, annotation_colors = annotation_2$colors,
show_colnames = FALSE, legend = TRUE, silent = TRUE)
# Arrange the two plots side-by-side and store the combined plot
standard_plots[[name]] <- arrangeGrob(p1$gtable, p2$gtable, ncol = 2, top = textGrob(name, gp = gpar(fontsize = 16)))
}
# Generate aggregated heatmaps and store them
for (name in names(all_data)) {
if (is.null(all_data[[name]])) next
# Aggregate data based on germ layers
aggregated_data <- create_aggregated_matrix(all_data[[name]], tissue_groups_2)
# Create annotation for the aggregated rows
agg_annotation <- create_row_annotation(rownames(aggregated_data), tissue_groups_2, group_colors_2)
p_agg <- pheatmap(aggregated_data, main = paste(name, "- Aggregated by Germ Layer"),
color = heatmap_color, border_color = NA,
cluster_rows = FALSE, cluster_cols = TRUE, kmeans_k = 4,
annotation_row = agg_annotation$df, annotation_colors = agg_annotation$colors,
show_colnames = FALSE, legend = TRUE, silent = TRUE)
# Store the single aggregated plot
aggregated_plots[[name]] <- arrangeGrob(p_agg$gtable, ncol = 1, top = textGrob(paste(name, "Aggregated View"), gp = gpar(fontsize = 16)))
}
standard_plots[['Embryo 1']]
View(p1)
grid.draw(standard_plots[['Embryo 1']])
kmeans(all_data$`Embryo 1`)
View(all_data)
all_data[["Embryo 2"]]
all_data[["Embryo 2"]]
a1=all_data[["Embryo 1"]]
View(a1)
kmeans(a1)
kmeans(t(a1))
kmeans(t(a1),centers = 3)
k1=kmeans(t(a1),centers = 3)
View(k1)
k1[["cluster"]]
